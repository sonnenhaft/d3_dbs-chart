{"version":3,"sources":["cardTypes.js","TransactionsHeader/TransactionsHeader.js","TransactionsLineChart/TransactionsLineChart.js","TransactionsLineChart/createLineChart.js","TransactionsPieChart/TransactionsPieChart.js","TransactionsPieChart/createPieChart.js","TransactionsTable.js","App.js","index.js"],"names":["cardTypes","key","value","color","cardsMap","reduce","getRandomTransaction","type","maxAmount","Math","floor","random","amount","TransactionsHeader","onTransactionAdded","useState","setTransaction","sendTransaction","className","map","checked","onChange","placeholder","e","target","onKeyUp","onClick","randomValue","types","range","legend","slice","length","reversedRange","reverse","TransactionsLineChart","data","canvasRef","useRef","chart","setChart","useEffect","canvasNode","current","Chart","getContext","labels","datasets","item","label","backgroundColor","borderColor","fill","options","title","display","text","responsive","maintainAspectRatio","tooltips","mode","intersect","hover","scales","xAxes","scaleLabel","labelString","yAxes","destroy","cardType","filter","forEach","amounts","index","sort","findIndex","update","ref","TransactionsPieChart","sum","defaultPageSize","columns","Header","accessor","Cell","props","App","Array","from","setData","TransactionsTable","rootEl","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.ca3c96c5.chunk.js","sourcesContent":["export const DBS_PAYLAH = 'paylah'\n\nconst cardTypes = [\n  { key: 'visa', value: 'Visa', color: '#ff6384' },\n  { key: 'american_express', value: 'American Express', color: '#36a2eb' },\n  { key: DBS_PAYLAH, value: 'DBS PayLah', color: '#ffce56' }\n]\n\nexport default cardTypes\n\nexport const cardsMap = cardTypes.reduce((cardsMap, { key, value }) => {\n  cardsMap[key] = value\n  return cardsMap\n}, {})\n\nexport const getRandomTransaction = (type, maxAmount = 1000) => ({\n  type: type || cardTypes[Math.floor(Math.random() * 3)].key,\n  amount: maxAmount - Math.floor(Math.random() * maxAmount)\n})\n","import React, { useState } from 'react'\nimport cardTypes, { getRandomTransaction } from '../cardTypes'\nimport './TransactionsHeader.css'\n\nexport const TransactionsHeader = ({ onTransactionAdded }) => {\n  const [{ type, amount }, setTransaction] = useState(getRandomTransaction());\n\n  const sendRandom = () => {\n    const randomValue = getRandomTransaction()\n    setTransaction(randomValue)\n    onTransactionAdded(randomValue)\n  }\n\n  const sendTransaction = () => onTransactionAdded({ amount, type });\n\n  return <div className=\"transactions-header\">\n    <div className=\"transactions-header__labels\">\n      { cardTypes.map(({ key, value }) => <label key={ key }>\n        <input type=\"radio\" value={ key }\n               checked={ type === key }\n               onChange={ () => setTransaction({ type: key, amount }) } />\n        { value }\n      </label>) }\n    </div>\n\n    <div>\n      <label>Amount</label>\n      <input type=\"number\" placeholder=\"Type amount here\"\n             onChange={ e => setTransaction({ amount: e.target.value, type }) }\n             onKeyUp={ e => e.key === 'Enter' && sendTransaction() }\n             value={ amount } />\n    </div>\n\n    <div>\n      <button onClick={ sendTransaction }>Send</button>\n    </div>\n\n    <div>\n      <button onClick={ sendRandom }>Send random</button>\n    </div>\n  </div>\n}","import React, { useRef, useEffect, useState } from 'react'\nimport cardTypes from '../cardTypes'\nimport createLineChart from './createLineChart'\n\nconst types = cardTypes.map(({ key }) => key)\nconst range = [50, 100, 200, 300, 500, 1000, 1001]\nconst legend = range.slice()\nlegend[legend.length - 1] = '1000+'\nconst reversedRange = range.reverse()\n\nconst countTransactions = arr => arr.sort().reverse().reduce((data, item) => {\n  data[reversedRange.findIndex(value => value <= item)]++\n\n  return data\n}, reversedRange.slice().map(() => 0)).reverse()\n\nexport const TransactionsLineChart = ({ data }) => {\n  const canvasRef = useRef(null);\n  const [chart, setChart] = useState(null);\n\n  useEffect(() => {\n    const chart = createLineChart(canvasRef.current, legend);\n    setChart(chart);\n\n    return () => chart.destroy();\n  }, []);\n\n  useEffect(() => {\n    if (!chart) {\n      return;\n    }\n\n    types\n      .map(cardType => data.filter(({ type }) => type === cardType).map(({ amount }) => amount))\n      .forEach((amounts, index) => chart.data.datasets[index].data = countTransactions(amounts))\n\n    chart.update()\n  }, [data, chart]);\n\n  return <canvas ref={ canvasRef } />\n}","import Chart from 'chart.js'\nimport cardTypes from '../cardTypes'\n\nexport default (canvasNode, legend) => new Chart(canvasNode.getContext('2d'), {\n  type: 'line',\n  data: {\n    labels: legend,\n    datasets: cardTypes.map(item => ({\n      label: item.value,\n      backgroundColor: item.color,\n      borderColor: item.color,\n      data: [],\n      fill: false\n    }))\n  },\n  options: {\n    title: {\n      display: true,\n      text: 'Transactions rounded to range values'\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    tooltips: {\n      mode: 'index',\n      intersect: false\n    },\n    hover: {\n      mode: 'nearest',\n      intersect: true\n    },\n    scales: {\n      xAxes: [{\n        display: true,\n        scaleLabel: {\n          display: true,\n          labelString: 'Transaction'\n        }\n      }],\n      yAxes: [{\n        display: true,\n        scaleLabel: {\n          display: true,\n          labelString: 'Transactions count'\n        }\n      }]\n    }\n  }\n})\n","import React, { useRef, useEffect, useState } from 'react'\nimport createPieChart from './createPieChart'\nimport cardTypes from '../cardTypes'\n\nconst types = cardTypes.map(({ key }) => key)\n\nexport const TransactionsPieChart = ({ data }) => {\n  const ref = useRef(null);\n  const [chart, setChart] = useState(null);\n  useEffect(() => {\n    const chart = createPieChart(ref.current);\n    setChart(chart);\n\n    return () => chart.destroy();\n  }, []);\n\n  useEffect(() => {\n    if (!chart) {\n      return;\n    }\n\n    chart.data.datasets[0].data = types.map((cardType) => data\n      .filter(({ type }) => type === cardType)\n      .reduce((sum, { amount }) => sum + amount, 0))\n\n    chart.update()\n  }, [data, chart]);\n\n  return <canvas ref={ ref } />\n}\n","import Chart from 'chart.js'\nimport cardTypes from '../cardTypes'\n\nexport default canvasNode => new Chart(canvasNode.getContext('2d'), {\n  type: 'pie',\n  data: {\n    datasets: [{\n      data: [1, 1, 1],\n      backgroundColor: cardTypes.map(({ color }) => color)\n    }],\n    labels: cardTypes.map(({ value }) => value)\n  }\n})\n","import React from 'react'\nimport ReactTable from 'react-table'\nimport 'react-table/react-table.css'\nimport { cardsMap } from './cardTypes'\n\nexport default ({data = []}) => <ReactTable\n  defaultPageSize={14}\n  data={data}\n  columns={[\n    { Header: 'Type', accessor: 'type', Cell: props => cardsMap[props.value] },\n    { Header: 'Amount', accessor: 'amount' }\n  ]}\n/>","import React, { useState } from 'react'\n\nimport './App.css'\nimport { DBS_PAYLAH, getRandomTransaction } from './cardTypes'\nimport TransactionsHeader from './TransactionsHeader'\nimport { TransactionsLineChart } from './TransactionsLineChart'\nimport TransactionsPieChart from './TransactionsPieChart'\nimport TransactionsTable from './TransactionsTable'\n\nconst App = () => {\n  const [data, setData] = useState(() => [\n    ...Array.from(new Array(142)).map(() => getRandomTransaction()),\n    ...Array.from(new Array(8)).map(() => getRandomTransaction(DBS_PAYLAH, 100))\n  ])\n\n  return <>\n    <TransactionsHeader onTransactionAdded={ value => setData([value, ...data]) } />\n    <div className=\"app-content\">\n      <div>\n        <TransactionsTable data={ data } />\n      </div>\n\n      <div className=\"app-charts\">\n        <div>\n          <TransactionsLineChart data={ data } />\n        </div>\n        <div>\n          <TransactionsPieChart data={ data } />\n        </div>\n      </div>\n    </div>\n  </>\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconst rootEl = document.getElementById('root');\n\nReactDOM.render(<App />, rootEl);\n\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    const App = require('./App').default;\n    ReactDOM.render(<App />, rootEl)\n  })\n}\n"],"sourceRoot":""}